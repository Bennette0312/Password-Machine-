import java.util.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class Main
{
//Part 1
	public static void main(String[] args) 
	{

    Scanner in = new Scanner(System.in);
    System.out.print("Please enter a given  password : ");
    String passwordhere = in.nextLine();
    System.out.print("Please re-enter the password to confirm : ");
    String confirmhere = in.nextLine();
    System.out.println("your password is: " + passwordhere);
    while (!passwordhere.equals(confirmhere) || !isValid.equals(passwordhere)); 
    {
        System.out.println("The password entered here  is invalid");
        System.out.print("Please enter the password again.it must be valid : ");
        String Passwordhere = in.nextLine();
        System.out.print("Please re-enter the password to confirm : ");

    }

	    Map<String, Integer>map = new Map<>(); 
        map.add("this",1 ); 
        map.add("coder",2 ); 
        map.add("this",4 ); 
        map.add("hi",5 ); 
        System.out.println(map.size()); 
        System.out.println(map.remove("this")); 
        System.out.println(map.remove("this")); 
        System.out.println(map.size()); 
        System.out.println(map.isEmpty()); 
//Part 2
	class secretEncryption
	{ 
	    
	static final int MAX = 26; 
  
    // Function to return the encrypted string 
    static String encryptStr(String str, int n, int x) 
    { 
  
        // Reduce x because rotation of 
        // length 26 is unnecessary 
        x = x % MAX; 
        char arr[] = str.toCharArray(); 
  
        // calculate the frequency of characters 
        int freq[] = new int[MAX]; 
        for (int i = 0; i < n; i++) 
            freq[arr[i] - 'a']++; 
  
        for (int i = 0; i < n; i++) { 
  
            // If the frequency of current character 
            // is even then increment it by x 
            if (freq[arr[i] - 'a'] % 2 == 0) { 
                int pos = (arr[i] - 'a' + x) % MAX; 
                arr[i] = (char)(pos + 'a'); 
            } 
  
            // Else decrement it by x 
            else { 
                int pos = (arr[i] - 'a' - x); 
                if (pos < 0) 
                    pos += MAX; 
                arr[i] = (char)(pos + 'a'); 
            } 
        } 
  
        // Return the count 
        return String.valueOf(arr); 
    } 
//Part 1
public static boolean isValid(String passwordhere) 
{
{
    }
    if (passwordhere.length() < 8) 
    {
        return false;
    } else 
    {

        for (int p = 0; p < passwordhere.length(); p++) 
        {
            if (Character.isUpperCase(passwordhere.charAt(p))) 
            {
            }
        }
        for (int q = 0; q < passwordhere.length(); q++) 
        {
            if (Character.isLowerCase(passwordhere.charAt(q))) 
            {
            }
        }
        for (int r = 0; r < passwordhere.length(); r++) 
        {
            if (Character.isDigit(passwordhere.charAt(r))) 
            {
            }
        }
        for (int s = 0; s < passwordhere.length(); s++) 
        {
            if (Character.isSpecialCharacter(passwordhere.charAt(s))) 
            {
            }
            return true;
        num = Integer.parseInt(keyboard.readLine());
        newNode = new LinkedListNode();
        newNode.info = num;
        
        newNode.link = null;
        if(first == null)
        {
            first = newNode;
            second = newNode;
            third = newNode;
            last = newNode;
        }
        else 
        {
            last.link = newNode;
            last = newNode;
    
        }
    Key key = new Key();
    Encryption encrypt; 
    String message;

    byte Message(); {
        System.out.println("Please enter an input:");
        Scanner user_input = new Scanner( System.in);
        message = user_input.next();
        encrypt = new Encryption();
    }


        Message message = new Message();        
        System.out.println(message.key.key);
        System.out.println(message.encrypt.alpha);
    }

}
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[16];
        random.nextBytes(salt);
 
        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 65536, 128);
 
        byte[] hash = factory.generateSecret(spec).getEncoded();
    
}
//Part 4
public class LinkedList { 
  
    Node head; // head of list 
  
    // Linked list Node. 
    // This inner class is made static 
    // so that main() can access it 
    static class Node { 
  
        int data; 
        Node next; 
  
        // Constructor 
        Node(int d) 
        { 
            data = d; 
            next = null; 
        } 
    } 
//Part 5     
    // Method to insert a new node 
    public static LinkedList insert(LinkedList list, int data) 
    { 
        // Create a new node with given data 
        Node new_node = new Node(data); 
        new_node.next = null; 
   
        // If the Linked List is empty, 
        // then make the new node as head 
        if (list.head == null) { 
            list.head = new_node; 
        } 
        else { 
            // Else traverse till the last node 
            // and insert the new_node there 
            Node last = list.head; 
            while (last.next != null) { 
                last = last.next; 
            } 
   
            // Insert the new_node at last node 
            last.next = new_node; 
        } 
   
        // Return the list by head 
        return list; 
    } 
  
    // Method to print the LinkedList. 
    public static void printList(LinkedList list) 
    { 
        Node currNode = list.head; 
  
        System.out.print("LinkedList: "); 
  
        // Traverse through the LinkedList 
        while (currNode != null) { 
            // Print the data at current node 
            System.out.print(currNode.data + " "); 
  
            // Go to next node 
            currNode = currNode.next; 
        } 
    } 
  
//Part 3   
  // A node of chains 
class HashNode<K, V> 
{ 
    K key; 
    V value; 
  
    // Reference to next node 
    HashNode<K, V> next; 
  
    // Constructor 
    public HashNode(K key, V value) 
    { 
        this.key = key; 
        this.value = value; 
    } 
} 
    // method to create a Singly linked list with n nodes 
    { 
        /* Start with the empty list. */
        LinkedList list = new LinkedList(); 
  
        // Insert the values 
        list = insert(list, 1); 
        list = insert(list, 2); 
        list = insert(list, 3); 
        list = insert(list, 4);
//Part 6       
        // Class to represent entire hash table 
class Map<K, V> 
{ 
    // bucketArray is used to store array of chains 
    private ArrayList<HashNode<K, V>> bucketArray; 
  
    // Current capacity of array list 
    private int numBuckets; 
  
    // Current size of array list 
    private int size; 
  
    // Constructor (Initializes capacity, size and 
    // empty chains. 
    public Map() 
    { 
        bucketArray = new ArrayList<>(); 
        numBuckets = 10; 
        size = 0; 
  
        // Create empty chains 
        for (int i = 0; i < numBuckets; i++) 
            bucketArray.add(null); 
    } 
  
    public int size() { return size; } 
    public boolean isEmpty() { return size() == 0; } 
  
    // This implements hash function to find index 
    // for a key 
    private int getBucketIndex(K key) 
    { 
        int hashCode = key.hashCode(); 
        int index = hashCode % numBuckets; 
        return index; 
    } 
//Part 7
  Scanner in2 = new Scanner(System.in);
    System.out.print("Please enter a given  password : ");
    String passwordhere = in2.nextLine();
    System.out.print("Please re-enter the password to confirm : ");
    String confirmhere = in2.nextLine();
    System.out.println("your password is: " + passwordhere);
    while (!passwordhere.equals(confirmhere) || !isValid.equals(passwordhere)); 
    {
        System.out.println("The password entered here  is invalid");
        System.out.print("Please enter the password again.it must be valid : ");
        String Passwordhere = in2.nextLine();
        System.out.print("Please re-enter the password to confirm : ");

    }
    public static boolean isValid2(String passwordhere) 
{
{
    }
    if (passwordhere.length() < 8) 
    {
        return false;
    } else 
    {

        for (int p = 0; p < passwordhere.length(); p++) 
        {
            if (Character.isUpperCase(passwordhere.charAt(p))) 
            {
            }
        }
        for (int q = 0; q < passwordhere.length(); q++) 
        {
            if (Character.isLowerCase(passwordhere.charAt(q))) 
            {
            }
        }
        for (int r = 0; r < passwordhere.length(); r++) 
        {
            if (Character.isDigit(passwordhere.charAt(r))) 
            {
            }
        }
        for (int s = 0; s < passwordhere.length(); s++) 
        {
            if (Character.isSpecialCharacter(passwordhere.charAt(s))) 
            {
            }
            return true;
        }
}class reHashEncryption
	{ 
	    
	static final int MAX = 26; 
  
    // Function to return the encrypted string 
    static String encryptStr(String str, int n, int x) 
    { 
  
        // Reduce x because rotation of 
        // length 26 is unnecessary 
        x = x % MAX; 
        char arr[] = str.toCharArray(); 
  
        // calculate the frequency of characters 
        int freq[] = new int[MAX]; 
        for (int i = 0; i < n; i++) 
            freq[arr[i] - 'a']++; 
  
        for (int i = 0; i < n; i++) { 
  
            // If the frequency of current character 
            // is even then increment it by x 
            if (freq[arr[i] - 'a'] % 2 == 0) { 
                int pos = (arr[i] - 'a' + x) % MAX; 
                arr[i] = (char)(pos + 'a'); 
            } 
  
            // Else decrement it by x 
            else { 
                int pos = (arr[i] - 'a' - x); 
                if (pos < 0) 
                    pos += MAX; 
                arr[i] = (char)(pos + 'a'); 
            } 
        } 
  
        // Return the count 
        return String.valueOf(arr); 
    }
    //Part 8
    public static String decrypter() {
        String wordDecrypted = "";
        for (int i = 1; i < table.length; i++) {
            for (Object item : table[i]) {
                wordDecrypted += item;
            }
        }
        return wordDecrypted.replaceAll(ENCRYPTION_FIELD, "");
    }
}

//Part 10
//Reset Password
            public class PasswordResetToken {

            public String doResetPassword(String userId) {
            String result = "";
            try {
            ResetPasswordResult rpr = connection.resetPassword(userId);
            result = rpr.getPassword();
            System.out.println("The temporary password for user ID " + userId
            + " is " + result);
            } catch (ConnectionException ce) {
            ce.printStackTrace();
            }
            return result;
